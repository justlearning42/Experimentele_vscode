{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pyvisa \n",
    "import time\n",
    "import csv\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from IPython.display import display, clear_output\n",
    "\n",
    "rm = pyvisa.ResourceManager()\n",
    "\n",
    "k2400_heater = rm.open_resource('GPIB0::2::INSTR')\n",
    "k2400_sample_current = rm.open_resource('GPIB0::1::INSTR') #good\n",
    "k2000_pt = rm.open_resource('GPIB0::26::INSTR') #good\n",
    "k2000_sample_voltage = rm.open_resource('GPIB0::3::INSTR') #good\n",
    "\n",
    "def get_current(device):\n",
    "    return float(device.query(':MEASure:curr?').split(',')[1])\n",
    "\n",
    "def get_voltage(device):\n",
    "    return float(device.query(':MEASure:voltage?'))\n",
    "\n",
    "def get_fres(device):\n",
    "    return float(device.query(':MEASure:FRES?'))\n",
    "\n",
    "def set_current(device, value):\n",
    "    device.write(f':sour:current {value}')\n",
    "    device.write(':outp on')\n",
    "\n",
    "def set_current_range(device, value):\n",
    "    device.write(f':sour:curr:range {value}')\n",
    "\n",
    "def get_current_range(device):\n",
    "    return device.query(':sour:curr:rang?')\n",
    "\n",
    "def get_temp(device):\n",
    "    #fpres = get_fres(device)\n",
    "    #\n",
    "    pass\n",
    "\n",
    "def I_V_scan(I_vals):\n",
    "    max_I = max(I_vals)\n",
    "    if max_I == 0:\n",
    "        raise ValueError\n",
    "    else:\n",
    "        i = 0\n",
    "        while 10**(-i) >= max_I:\n",
    "            i +=1\n",
    "        range_max = 10**(-i+1)\n",
    "    set_current_range(k2400_sample_current, range_max)\n",
    "    V_vals = []\n",
    "    for I in I_vals:\n",
    "        set_current(k2400_sample_current, I)\n",
    "        get_current(k2400_sample_current)\n",
    "        time.sleep(0.5)\n",
    "        V_vals.append(get_voltage(k2000_sample_voltage))\n",
    "    return V_vals\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k2400_sample_current.write(':outp off')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "V = I_V_scan([0.01,0.02,0.03,0.04,0.05,0.06])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2.22811666e-06,\n",
       " 2.21694619e-06,\n",
       " 2.02650971e-06,\n",
       " 2.69856726e-06,\n",
       " 2.65921042e-06,\n",
       " 1.90896548e-06]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "V"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Student_setup_LukasBuild",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
